package com.example.justbintime.data

import android.content.Context
import android.util.Log
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.justbintime.data.dao.BinDao
import com.example.justbintime.data.dao.ColourDao
import com.example.justbintime.data.dao.IconDao
import com.example.justbintime.data.`object`.Bin
import com.example.justbintime.data.`object`.BinColours
import com.example.justbintime.data.`object`.BinIcon
import com.example.justbintime.ui.theme.BinGardenColor
import com.example.justbintime.ui.theme.BinLandfillColor
import com.example.justbintime.ui.theme.BinRecyclingColor
import java.util.concurrent.Executors


@Database(entities = [Bin::class, BinColours::class, BinIcon::class], version = 10, exportSchema = true)
@TypeConverters(Converters::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun binDao(): BinDao
    abstract fun colourDao(): ColourDao
    abstract fun iconDao(): IconDao

    companion object {
        @Volatile private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val inst = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java, "bin_database"
                ).fallbackToDestructiveMigration()
                    .addCallback(object : Callback() {
                    override fun onCreate(db: SupportSQLiteDatabase) {
                        super.onCreate(db)
                        Executors.newSingleThreadExecutor().execute {
                            INSTANCE?.let {
                                initDatabase(it)
                            }
                        }
                    }
                    override fun onDestructiveMigration(db: SupportSQLiteDatabase) {
                        super.onDestructiveMigration(db)
                        Executors.newSingleThreadExecutor().execute {
                            INSTANCE?.let {
                                initDatabase(it)
                            }
                        }
                    }
                })
                .build()
                INSTANCE = inst
                inst
            }
        }

        fun initDatabase(instance: AppDatabase) {
            instance.clearAllTables()

            // Wipe any existing entries in the database
            val binDao = instance.binDao()
            val colDao = instance.colourDao()
            val iconDao = instance.iconDao()
            binDao.deleteAll()
            colDao.deleteAll()
            iconDao.deleteAll()

            val factory = BinFactory()

            // First, add the BinColours, so we can fetch their bcId (autogenerated)
            val landfillColor = BinColours(BinLandfillColor)
            val recyclingColor = BinColours(BinRecyclingColor)
            val gardenColor = BinColours(BinGardenColor)
            colDao.upsert(landfillColor, recyclingColor, gardenColor)

            // Check the number of colours in the DB
            val numCols = colDao.getAll().size
            Log.e("AppDatabase", "Prepop'd $numCols colours")

            // Then, insert the icons
            val binIcons = factory.makeIcons()
            iconDao.upsertAll(binIcons)

            // Make the default set of bins (without reference to colour/icon)
            val landfillBin = factory.makeLandfillBin()
            val recyclingBin = factory.makeRecyclingBin()
            val gardenBin = factory.makeGardenBin()

            // Set the colour scheme to match the colours we added
            landfillBin.binColoursId = colDao.getByPrimary(landfillColor.cPrimary).first().bcId
            recyclingBin.binColoursId = colDao.getByPrimary(recyclingColor.cPrimary).first().bcId
            gardenBin.binColoursId = colDao.getByPrimary(gardenColor.cPrimary).first().bcId

            // Set the icon resources to match the icons we added
            landfillBin.binIconId = iconDao.getByResourceString(BinIcon.LANDFILL_RES).first().iconId
            recyclingBin.binIconId = iconDao.getByResourceString(BinIcon.RECYCLING_RES).first().iconId
            gardenBin.binIconId = iconDao.getByResourceString(BinIcon.GARDEN_RES).first().iconId

            binDao.insertAll(landfillBin, recyclingBin, gardenBin)

            // Check the bins were inserted correctly
            val numBins = binDao.getAll().size
            Log.e("AppDatabase", "Prepop'd $numBins bins")
        }
    }

}
